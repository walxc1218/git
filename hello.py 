

print（＂hello!＂）
python中核心的数据类型
数字（整型　浮点型　复数　布尔型）
字符串
列表
．．．
整形数　ｉｎｔ
整形数是不带小数部分的数．包括０自然数　和负数
如：－５
整数　字面值的表达式
十进制的　二进制表示
０b 开头　后跟０或１
如：0b111
八进制的表示
０o开头　后跟０到７
十六进制
０x开头　后跟　０到９，Ａ－Ｆ或小写的a-f
a表示１０　b 表示１
0xFFFF 
浮点型数　类型是float 
带有小数部分的数字　小数部分可以为０
小数表示法　３．１４　３．１４
３．　
科学计数法　格式：小数　e/E正负号　指数
６．１８Ｅ－１　
复数　complex
分为两个部分：
实部　虚部　虚部是以j或Ｊ结尾
布尔型数
true false
负数　整数　小数都可表示
如１．２＋１．２j
空值对象
Ｎone 是一个表示不存在的特
　表达式　和运算符
表达式　expression
由一个数字或者数字和运算符组成
运算符
算数运算符
加法运算＋
减法运算－
乘法运算＊
除法运算／
地板除／／
求余　％
幂运算　＊＊
除法
得到的数是浮点数，不会丢弃小数部分
／／地板除　除的结果是去掉小数部分向下取整
　求余
３．２５　
＊＊幂运算
x**y
３．０＊＊４．０　＝　
练习
：
１．一个商店卖西瓜７元一个
运算符的优先级
＊＊　
＊　／／　％　
＋－

括号分组子表达式　用（）可以将表达式分组，（）内部的表达式先进行运算
如：２＊　混合类型自动升级
１＋２．１４
基本输出函数　
print函数
格式：　print（表达式１　，表达式２）
变量
关联对象的一个符号
变量可以绑定一个对象，并可以通过变量名来使用这个对象
变量名必须是标识符
标识符的命名方法
标识符必须为字母或下划线开头，后跟字母下划线或数字，不能使用python的关键字
变量名区分大小写
合法的变量名实例：
a  _a
不合法的：
1a 123 a#ｄ　等
python中的关键字
True ,False,None,is,del,elif,....
变量名　
赋值语句
statements
运算符　＝
赋值语句的语法：
变量名　＝表达式　或变量名１＝变量名２　＝变量名３　＝表达式
或变量名１　
作用：创建一个变量　或修改一个变量绑定的数据
赋值运算符说明：
当变量不存在时创建一个变量，同时将变量绑定到对象上
当变量存在时，改变变量的绑定关系，一个变量只能绑定一个对象　
实例:
a = 10 创建一个变量a　
b = 10 创建
a =b =c =10000创建或 
x,y = 100,200
python中 关联／绑定　引用的含义
在python中，变量没有类型
关联／绑定／引用都是指变量
任何一个变量一定是绑定一个对象
python中自动化内存管理
实例：
a = 100
b = 200
c =300
练习：
指定一个半径为３cm的圆，计算周长是多少ＣＭ并打印出来




python 
python的官网　www.python.org
1解释执行相应的文件
２交互模式
python3  print()
解释执行　
python3 xxx.py
编辑xxx.py 加入
#!/usr/bin/python
python的注释
＃开头，直至行２尾
布尔类型bool 
数字类型
int float complex bool
0x
0.12E-1
表达式
１＋２
id(x)
表达式一定可以返回一个值
is is not
print()
变量名１＝变量名２＝表达式
创建变量
创建变量来绑定数据对象
改变变量的绑定关系
del 语句
is  is not
a is b 判断id(a)等同于id(b)
小整数对象池
－５　到２５６　一直存在
day02
复合赋值运算符
+= -= *+ /= //= %= **=
x＋＝y 等同于x=x+y
比较运算符
＜　＜＝　　＞＝　＝＝　　！＝
比较　运算的语法
左表达式　＜　右表达式
笔记运算符返回布尔类型的值

例：
１＜２　true
1<= 2 true
1 == 2 false
x = 60
0 <= x <= 100 true
数值对象的转化函数
float (obj)  用字符串或数字转换成浮点数，如不给出参数则返回０．０
int (x,base = 10)或int(x=0)
用数字或字符串转换为整数，如果不给出参数则返回０
complex(r=0.

int("12",base = 8)
complex(r=0.0 ,i=0.0)
bool(x)用于显示获取Ｘ的布尔值：
值　说明
None  
练习：
将数字3.14用变量pi绑定
将Pｉ变量转为整数，用变量Ｉ绑定
将ＰＩ变量与Ｉ变量相兼
其他的函数
abs(x) 取x的绝对值
round（number[ ,ndigits]对数据进行近似的值四
注　［］表示里边的内容可以省略
pow(2,2,3)即 2**2%3
help()可以查看帮住问答秒

help(对象／类型／字符串)

语句　statement 
语句由一些表达式组成，通常一条语句可以独立执行
来完成一部分事情并形成结果
说明：
一条语句建议写在一行内
多条语句写在一行内需要用分号（;）分开
示例：
x = 100 + 200
print(x)
写在一起为：x = 100+200;print(x)
显示换行
折行符　＼　反斜杠
折行必须放在一行结尾

隐式换行
所有的括号内换行，称为隐式折行　括号：（）　｛｝　［］
函数的基本输入输出
基本输入函数　input
input("提示字符串")　返回用户输入的字符串
说明：
提示字符串可以为空
返回值：
字符串
示例见：
input.py
s = input("")＃阻塞函数等待用户输入
print() 
基本输出函数
print()作用：
将一系列的值以字符串开式输出到标准输出设备上，默认为终端
格式：print(v,..,sep=" ",end = '\n',flush=false)
关键字参数：
sep：两个值之间的分隔符
＃print.py
print(1,2,3,4)
print(1,2,3,4,end="\n")＃                                    换行
print(1,2,3,end="")
print(4,5,6,end="")
倾倒flush:是否立即输出到屏幕上，默认false
示例：
练习：
输入两个整数，分别用变量x y绑定
１计算这两个数的和并打印出来
２计算两个数的积并打印出来
３计算x的y次方打印                                              debug 用法

如何只让程序执行其中的一条语句
if语句
作用：让程序根据条件执行某条语句或某些语句
语法：
if 真值表达式：
    语句块１
elif 真值表达式２：
    语句块２
elif 真值表达式３：
    语句块
．．．
else:
    语句块４

1输入一个季度１－４，输出这个季度有那几个月，如果用户输入的不是１到４的整数
，则提示用户　你输入错误
输入一年中的月份１到１２，输出这个月在哪几个季度，如果用户输入的是其他的数，则提示用户输入错误




pass 语句
作用：
通常用来填充语法空白　
语法：pass
pass.py
if　表达式：
    pass
 布尔运算：
 not and or 
 布尔非操作　not 
 语法：not x 注　x 代表表达式
 作用　对Ｘ进行布尔取非
 ｉｆ　not 表达式：
    print()
    布尔与操作　and
    注　x y 优先返回假值对象
    当x 的值为假时返回x ｆｏ
    ０and 0.0  0
    1 and 2    2
    布尔or 
    x or y
    100 or 3.14   3.14
    0 or 0.0       0.0
整负号运算符
语法：
+ 表达式
－表达式
示例：
a =5 b = -a



练习：



练习:
  1. 北京出租车计价器
    收费标准:
      1. 3公里以内收费 13元
      2. 基本单价 2.3 元/公里(超过3公里以外)
      3. 空驶费: 超过15公里后,每公里加收单价的50%空驶费
         (即3.45元/公里)
    要求: 输入公里数,打印出费用金额(以元为单位精确到分)
  2. 输入三个任意的数:
    1) 打印出最大数是多少?
    2) 打印出最小数是多少?
    3) 打印出三个数的平均值是多少?
  3. BMI指数(Body Mass Index) 又称身体质量指数
    BMI计算公式:  BMI = 体重(公斤) / 身高的平方(米)
    如:  一个69公斤的人,身高是173厘米 则BMI如下:
       BMI = 69 / 1.73 ** 2    得23.05
    标准表:
      BMI < 18.5       体重过轻
      18.5 <= BMI < 24 正常范围
      BMI >= 24        体重过重
    输入身高和体重,打印出BMI值,并打印体重状况

      
g = int(input("请输入要计算费用的公里数："))
if g ＜＝　３：
    print("13")
elif 3 < g <= 15:
    p = 2.3 * g:
    print(p)
else:
    g >15
    p = (2.3 * 15) + 3.45 * (g - 15)
    print(p) 


day03笔记
字符串　str
用来记录文字文本信息
字符串的表示方式：
在非注释中凡是用引号扩起来的部分都是字符串
＇
＇＇＇
＂
＂＂＂
空字符串的字面值表示：
＇＇
＂＂
＂＂＂＂＂＂
＇＇＇＇＇＇
注　空字符串的布尔测试值bool(x)为false
非空字符串
＂hello＂
"""hello"""
'''hello'''
单引号和双引号
print("i'm a teacher")
print('i am "lilei"')
三引号字符串的：
以＂＂＂或＇＇＇开头或结尾的字符串
作用：
三引号内可以包含单引号和双引号
三引号的字符串的换行会自动转换成换行符＼n
 welcome to beijng
隐式字符串  
用转义序列代表特殊字符
字符串字面值中用字符反斜杠（＼）后跟一个或一些字符代表特殊的一个字符
＼＇　＇
＼＂　＂
＼＼　＼
＼n    \
\r   回车键
\f 换页

\t 水平子表符
\v 垂直制表符
＼b 倒退
＼a 响铃
＼０　空格符（字符为０）
＼０oo
ASCII编码表　
man ascii 查看ＡＳＣＩＩ编码表
 常用的ＡＳＣｉＩ　的编码
 字符　　　　十进制　　　十六进制
　　　　　　　　
＇０＇　　　　　４８　　　　　０x30
'A'           65          0X41
'a'            97         0x61

序列
字符串是序列
序列是指有先后顺序的排列

求序列的长度的函数len
len(s)返回字符串中字符的个数

得到如下字符串中有几个字符
１　abcd1234
2  '5\'4"'
3

raw 字符串（原始字符串）
格式：＂
r'字符串的内容'
r＂字符串的内容＂
r'''字符串的内容'''
r"""字符串的内容"""
作用：
s = r"\t\n"  \t\n
字符串的运算
＋　＋＝　*　*＝　
＋运算符用于拼接字符串
x = "abcd"
y = "125"
+= 运算符　用原字符串与右侧的字符串拼接生成新的字符串，再用原来的变量绑定新的字符串
* 运算符
生成重复的字符串
x * y
x = "123" * 3
print(x)
字符串只能和整数相乘
x = "123" * 3.5  不正确
*＝　生成重复的字符串　在用变量重新绑定
练习：
写一个程序，打印一个高度为４行的矩形方框
如：
请输入矩形方框的宽度：　１０
打印如下：
＃＃＃＃＃＃＃＃＃＃
＃　　　　　　　　＃
＃　　　　　　　　

w = "#" * 10
" " *(w - 2)

k = "#" * 10
g = "#" * 4

字符串
比较　：　＜　＜＝　＞　＞＝
规则：
依次按编码值进行两两比较，一旦不同，则比较结束，返回比较结果当编码值的长度完全相同时，两个字符串完全相等
　＇＇
"abcd"!= "cdba"
"abc" = r"abc"
in    not in
作用：
in 用于类表　字典　集合中，用于判断某个值是否在容器中，如果存在则返回true,否在返回false
对象　in  序列
x = "welcome to tarena"
"to" in x  true
"e t" in x  true
练习：
写一个程序，任意输入一个字符串，判断你的名在是否在这个字符串中，如果存在打印出来，
＃输入一个字符串
i = input("请输入一段文字")
if＂wuwenhui＂in i:
print(i)

字符串的索引操作
索引　Index
python 字符串是不可以改变的序列
语法：
字符串［整数表达式］
说明：
python 序列都可以用索引index访问序列中的元素
python 序列的正向索引是从０开始的，第二个索引为１　最后一个索引为len(s)-1

s = "12345"
s[0]
"1"
s[1+1] 
"3"
s[-1]  "5"
s[-5]  "1"
＃输入一个字符串
b = input("请输入一个字符串：")
print(b[0])
print(b[len(b)-1])
if len(b) % = 1:
    print(len[b/2-1])

切片　slice
作用：
从字符串序列中取出相应的元素重新组成一个字符串序列
语法：
s [(开始索引b)：（结束索引e）(:(步长s))]
注：（或）代表其中的内容可以省略
说明：
开始索引是切片开始切下的位置，０代表第一个元素与索引相同，结束索引是切片的终止索引（不包含终止点）
步长是切片每次获取完当前元素后移动的方向和偏移量
１没有步长，相当于步长为１（默认值：１）
当步长为正整数时，取正向切片
开始索引默认为０，结束索引是
s = "abcde"
h = s[1:4] bcd
h = s[1:] bcde 等同于　[1:5]
h = s[:4] abcd
s[1:1] "" 空字符串
［３：０］　＂＂空字符串
［０：５：２］　ace
[::2] ace
[4:1:-2]eca
[::1] edcba
练习：
写一个程序输入一个字符串，把第一个字符和最后一个字符去掉打印出处理后的字符串
输入一个字符串判断这个字符串是否是回文
s = input("请输入一个字符串：")
l = s[1:]
h = l[：-1]
print(h)
`
字符串序列相关函数
len(x)
max(x)
min(x)
比较id
max(1,3,4) 4  
字符串编码转换函数
ord(c) 返回一个字符c的unicode编码值order(ord)
ord("a") 68
chr(20013) 中　返回字符
练习：
１写一个程序，输入一个字符串，如果字符串不为空，则把这个字符打印出来
s = input("输入一个字符串")
if s: #s为true 
print("字符串的吗是",ord(s))


整数转为字符串的函数
bin(i) 将整数转为二进制的字符串
oct(i)  将整数转为８进制字符串
hex(i)  将整数转为16进制字符串
字符串的构造函数 str
str(obj="")　str(10) "10"

将对象转换为字符串
python中字符串的方法
方法调用语句：
　对象．方法名（方法传参）
示例：
s = ""
"abc  ab ac"
s.count("ab",5,10)


练习：
１用字符串　*　运算符　打印三角形
要求输入一个数，此整数代表此三角形离左侧的字符个数
如：
请输入左侧的空格数：３

２输入一个字符串，把输入的字符串中的空格全部去掉
打印出处理后的字符串的内容 replace("","")

３输入三行文字，让这三行文字在一个方框内居中显示
如（请不要输入中文）
请输入第一行：hello!
请输入第二行：I＇m studing python!
请输入第三行： I like python!
max_len = max(len(a),len(b),len(c))


ord()
chr()
bin()
oct(i)
hex()
str()
s.isalpha()
s.isspace()
s.center()
s.count(字符串，begin,end)
s.find(字符串,begin,end)

day04
字符串的格式化表达式
作用：
生成一定格式的字符串
运算符％
语法格式
格式化字符串％参数值
格式化字符串％（参数值１，参数值２，．．．．）
示例：
fmt ="name: %s, age:%d"
n = "tarena"
a = 15
sesult = fmt % (n,a)

占位符　类型码           意义
%s                    字符串．使用str(x)函数转换
％r                 字符串　使用repr（x）函数转换
%c                  整数转为单个字符
%d
%o
%x
%X
%e
%E
%f,%F
%g,%G
%%

占位符和类型码之间的格式化语法：
％［－＋０宽度．精度］　类型码
说明：
－　　左对齐（默认为右对齐）
＋　　显示正号
０　　左侧空白位置补０
宽度　　整数，整数数据输出的宽度（占用的字符数）
精度　　
示例：＂％d＂ % 123   "123"
"%10d" % 123     "       123" 前边是７个空格
"%－10d" % 123　　＂123      ＂　后边７个空格
"%０10d" % 123　　　＂0000000123＂
"%+010d" % 123     "+000000123"
pi = 3.141592678
"%f" % pi     "3.1415926" b
"%.10f" % pi   "3.1415926789" 小数点后边保留１０小数四舍五入保留
"%７.2f" % pi    '   3.14" 前边３个空格  ?
＂％５d" % 1234567890  "1234567890"
练习：
a = input("请输入第一行")
a = input("请输入第一行")
print("%20s" % a)

fmt = "%" + str(max_length) + "s"  
print("%8s")



循环语句：
while 语句
for 语句
输入一个整数，写程序打印如下：
这是第一行
这是第二行
．．．这是第n行



while 语句：
作用：
根据一定条件，重复的执行一条语句或多条语句
语法：
　while 真值表达式：
    语句块１（此部分的语句可能重复执行）
  else:
    语句块２
说明：
１执行真值表达式，测试布尔值为true或False
2如果真值表达式测试值为Ｔrue,
 示例　打印２０行　
i = 1
while i <= 20:
    print("hello")     
    i += 1
else:
    print()



i = 1
while i <= n:
    print("这是第",n,"行")
    i += 1


练习：
１打印１到２０的整数，打印在一行内显示，每个整数之间用一个空格分隔
如：
１　２　３　４　．．．．．．．．．．２０
打印１到２０　个数　每５个打印一行　打印４行

i = １
while i <= 20:

    print(i,end = " ")
    i += 1
    print (i,sep ="" end ="\n",flush = false) sep 同一行两个字符串的之间用什么隔开　默认是空　什么也没有

练习：
用while语句打印２０　到　１　之间的数 


print(i[::-1])

写一个程序　输入一个开始的整数，用变量begin绑定
输入一个结束的整数，用变量end绑定
打印从begin到end　不包含end 之间的每个整数，打印在一行内，如
输入开始值８　，结束值　１９


begin = int(input("请输入开始值"))
end = int(input("请输入结束数")))
while begin ＜　end：
    print(begin)
    begin += 1
 
 break 语句
 问题：如果在循环过程中，不想再继承执行此循环了．怎么把
 作用：
 用于循环语句（while或for语句）中，用来终止当前循环语句的执行
 语法：
 break
 说明：
 当break语句执行后，此循环语break之后的语句不再执行
 break语句通常和if语句组合使用
 break语句终止循环时
 
 i = 1
 while
 break

 死循环　death loop
 死循环是指循环条件一直成立的循环
 死循环通常用break语句来终止
 死循环的子else字句永远不会执行

 练习：
 让用户任意输入一些整数，当输入负数时结束输入
 当输入完成后，打印用户输入的所有整数的和
 如：
 请输入：１
 请输入：２
 请输入：４
 请输入：－１
 您输入的这些数的和是：１０

写程序，求下列算数的值
1/1+1/3-1/5+....+1/(2*n-1)的和
求：
2用while语句打印三角形，输入一个
3 用程序while 语句生成如下字符串并打印结果：
打印 “ABCD......Z”
打印  “AaBb......XxYyZz"

       十进制         十六进制
'A'     65          0x41
  'a'     97          0x61
Z        90
z        122
#打印A到Z
i = ord("A")
while ord("A") <= i <= ord("Z"):
    print(chr(i),end="")
    i += 1


break

for 语句
作用：
用来遍厉可迭代对象的数据元素
可迭代对象是指能依次获取数据元组的对象
可迭代对象包括：
字符串 str

语法：
for 变量列表 in 可迭代对象：
    语句块
else:
 语句块2
 说明：可迭代对象每次提供一个元素，依次赋值给变量列表中的变量，赋值完毕后执行语句块1,重复执行此步骤，指到可迭代对象不能提供    

任意输入一个字符串，写程序:
计算出空格的个数 并打印个数
用for

y = input("请输入一个字符串：")
i =0
for b in y:
    print(b)
    if ==" ":
    i += 1

练习：
输入一个字符串，从尾到头输出这个字符串的字符
输入：hello
打印
o l l e h

s = intput("请输入一个字符串")
for ch in s[::-1]:
    print(ch)


range函数
range(stop) 用来生成0-stop区间内的整数，直到stop为止，不包含stop
range(start,stop,step 用来生成start -stop区间 
range(4) 0 1 2 3
range(3,9)

1+3+5+...+99

s =0
for x in range(1,100,2)
    print(x)
    s += s

continue 语句
问题：
用于循环语句（while for）中，不在执行本次循环内continue之后的语句,重新开始一次新的循环
在for语句中执行contin 语句将会从可迭代对象中取下一个元素后，绑定变量

for x in range(5):
    if x % 2 ==1:
        continue
print(x)

练习：


求1到100之间所有不能被2 3 5 7中 任意一个数整除的数的和
#打印1到100的数
for a in range(100): :
        continue
    print(a)
     a += a

循环中 
for 语句
字符串 str
range  可以用for
break 终止循环
continue 

列表：
如何将计算机数据临时存储在一个位置，又
列表是一种容器
列表是被可以改变的序列
列表是由一系列的特定元素组成，元素与元素之间没有任何练习add del mod
创建空列
[]
l = [1,2,3,4]
l = ['tarena','shanghai','shenzhen']
l = [1,"二"，3.14]
l = [1,2,[1,2]]


列表的构造函数
list[]  生成一个空列表 等同于 []
list(iterable) 用可迭代对象创建一个列表
示例：
l = list[]
l =["hello"] 
列表的运算
+ += * *=
+ 用于拼接
x =[1,2,3]
y = [4,5,6]
x+y =[1,2,3,4,5,6]
y + x =[4,5,6,1,2,3]
+= 运算
用于将右侧可迭代对象的数据追加在原来数据之后
语法：
x += 可迭代对象
如：
x = [1,2,3]
x +=[4,5,6]  是1，2，3，4，5，6
x += "abc"[1,2,3,a,b,c]
x += range(10,13) [1,2,3,10,11,12]

x =[1,2,3]
x +=[4,5,6]
            id 一样
* 生成重复的列表
x=[1,2] *3 x=[1,2,1,2,1,2]
*=2 x=[1,2,1,2]
y = 3
y *=[1,2] y = [1,2,1,2,1,2]
列表的比较
运算符：
< <= > >= ==  =!
列表比较规则，和字符串一样
列表要求每两个元素能依次比较，否则会出现类型错误
[1,2,3]=! [2,3,4]
[1,'a']和['a',1]  这两个不能比较
[1,'a']<[2,4] true
列表是可迭代对象
l =[1,3,5]
for i in [1,2,3]
print(i)
练习：
写一个程序，输入三行字，将这三行字保存到一个列表L中，并打印这个列表

请输入abc
请输入 123
请输入 你好

in1 = input("请输入第一行字")
in2 = input("请输入第二行字")
in3 = input("请输入第三行字")
l = [in1,in2,in3]
print(l)

列表的 in 和 not in 运算符
如果存在 返回true 否则返回false
示例：
x = [1,'two',3,'四']
3 in x true
4 in x false
5 not in True

1 not in x false


练习：
1. 写程序打印99乘法表
1*1=1
1*2=2 2*2=4
1*3=3 2*3=6 3*3=9
....................
1*9=9.................9*9=81

2.写一个程序，任意输入一个整数，判断这个数是否为素数，prim素数（也叫质数）。是只能被1和自身整除的正整数
如：2 3 5 7 11
提示：
用排除法：当判断x是否为素数时，只要让x分别除以2 3 4 5 6..x-1,只要有一次别被整除,则x不是素数，否则x是素数。

3.输入一个整数，此整数代表树干的高度，打印一颗如下的形状的圣诞树
如：输入：2
打印如下：
    *
   ***
    *
    *


 输入：3
    *
   ***
  *****
    *
    *
    *
4.算出100到999范围内的水仙花数
是指百位的三次方+十位的三次方=原数的整数
如：
153=1**3+5**3+3**3
答案：
153,370，............



for 变量列表 in 可迭代对象
以及后边所学的所有容器类都是可迭代对象
range()
作用：
用于创建一个整数序列生成器（可迭代对象）
continue 语句
列表 
可变的序列 
list 
列表 += 可迭代对象（实现追加可迭代对象内的数据）
依次比较 
in  / not in

day06
列表的索引操作
[] index 
索引的语法：
列表[整数表达式]
用法
等同于字符串的索引
索引分为正向索引和反向索引，规则与字符串的规则完全相同
示例：
l = [1,2,3,4,5]
print(l[0])   1
print(l[-2])  4

列表的索引赋值操作 
列表是可变的序列，可以通过索引改变列表中的元素
语法：
列表[整数表达式] = 表达式
示例：
l = [1,2,3,4,45]
l[2] = 6
print(l) = [1,2,6,4,45]
列表的切片
列表[：]
列表[::]
列表的切片是从列表中取出相应的元素，重新组成一个新的列表，列表的切片规则等同与字符串的切片的规则
示例

列表的切片赋值
作用：
可以改变原列表的排序，可以插入删除 修改数据
语法
列表[切片slice] = 可迭代对象
说明
赋值运算符的右侧必须是可迭代对象
示例
l = [2,3,4,5]
l[1:4] = [5,6,7]
l = [2,5,6,7]
l = [1:3] = [3.14]
l = [2,3.14,7]
l = [-1:-1]                       ?
l = [::] = [] 清空 不等同于 l = []
注意
l = [1,2,3,4]
l2 = l
l = []
print(l)

练习：
已知有列表
l = [3,5]
用索引和切片操作，将原列表改为     ?
 l = [1,2,3,4,5,6]
 将列表反转，删除最后一个元素打印此列表
 .....
 print(l) 

 l = [3,5]
 l[0:] =[1,2,3,4,5,6]
 

 print(l3)

 del 语句
 用于删除列表中的元素
 语法：
 del 列表[索引]
 del 列表[切片]
 示例：
  l= [1,3.14,2,100,3]
del l[1]
del l[2]

列表的切片操作注意事项
对于切片不等于1的切片赋值，赋值运算符右侧的可迭代对象提供的元素个数一定要等于切片dieu
python3 中常用的序列函数
len(seq)   返回序列的长度
max(x)    返回序列的最大值元素（要求每两个元素都能比较大小）
min(x)    返回序列最小值元素
sum(x)    返回序列中所有元素的和
any(x)    真值测试如果列表中其中一个元素为真 则返回 
all(x)

序列相关的函数
reversed(seq)  返回原数列的反向顺序的可迭代对象
sorted(iterable,reverse=false) 返回可迭代对象中排序后的对象列表
示例：
l =int(input("请输入一些正整数"))
 l = []
 while i > 0:
    if i == -1:
   break 
else:

python3 中常用的列表方法
h    


练习：
写一个程序，让用户输入两个以上的正整数，当输入负数时结束输入
要求：限制用户，不允许输入重复的数
打印这些数字的和
打印最大的数
打印第二大数
删除最小的数
i = int(input('请输入正整数'))
l = []
while i < 0:

print(sum[l],max[l])


深拷贝和浅拷贝
1 不拷贝
l = [12]
浅拷贝 shallow copy
浅拷贝是指在复制过程中，只复制一层变量，不会复制深层变量的拷贝过程
深拷贝
在复制过程中，复制所有变量及变量关联的深层变量绑定的对象，实现两个变量完全独立
示例：
import copy 

列表和字符串比较
列表和字符串都是序列，元素之间有先后顺序关系
字符串是不可改变序列，列表是可以改变的序列
字符串只能存储字符，列表可以存储任意类型的对象
列表和字符串都是可迭代对象
不可变数据类型：
占用内存相对较少，数据安全，但不能实现添加删除等操作
可变数据类型
占用内存较多，可以实现灵活的添加 删除 修改等操作

字符串文本解析方法split,splitlines和jion
S.split(sep=none)将字符串使用sep作用分隔符分割S字符串，返回分割后的字符串列表，当不给定参数时，用空白字符作为分隔符
S.splitlines(sep =none)将字符串以行为单位进行分割，形成分割后的列表 默认用
S.JION(ITERABLE)
"\\".jion(l)

练习：
有字符串“hello”,生成字符串“h e l l o”和“h-e-l-l-o”
l = "hello"
l=l.split("'")
print(l)

练习：
输入一个开始的整数 用begin绑定
输入一个结束的整数,用end 绑定
将从begin开始，到END结束不包含end,de 偶数中存于列表中，并打印此列表
建议用列表推导式 
已有字符串
s = "100,200,300,500,800"

已知

元组 tuple
元组
元组的表示方式
用小括号 括起来 单个元素
元组的运算
+ += * *=
in   not in
in  not in
判断一个之
元组的方法
 t.index(v,)
 练习、
 
 字典的迭代访问
 字典是可迭代对象，字典只能对键进行跌代访问
 字典的比较
 > 
 == 字典的键相同 值也相同 返回TRUR 反之false
 !=
 >
 字典可以用于字典的内建函数
 len(x)
 max(x)
 min(x)     ？ 如果建不是数字
 sum(x)
 any(x)
 all(x)
 字典[键]=值
 字典的方法
 文档参见
for k, v in items():
    print(k,v)
a 个数
b 个数
c  个数
d  个数
i = input("请输入一个字符串")
l = {}
for ch in i:
    l[ch] =i.count(ch)
    for t in l.items():
    print("%s:%d"%t)
    l = {}
for ch in i:
     l[ch]+=1
     print

写一个程序
 i = input("")

 字典推导式
 是用可迭代对象依次生成字典内元素的表达式
 语法：
 {键表达式：值表达式 for 变量 in 可迭代对象 [if 真值表达式]}
 []可以省略
 d ={x:x**2 for x in range(1,10)}
如下字符串
l = ['rarena','xiaozhang','hello']
d = {"tarena":6,"xiaozhang":9,"hello":5}
list1 = [1001,1003,1008,1004]
list2 = ['tom','jerry','spike','tyke']
x for x in list1:
    print(x)
y for y in list2:
    print(y)
    list1[x]=list2[y]
    print(x:y)
    规则同列表推导试
    字典 vs列表
    都是可变的对象
    索引方式不同
    字典的插入删除修改的速度可能会快于列表
    列表的存储是有序的 字典是无序的
    列表用整数索引 字典用键索引

    元组 
    运算 
    t[1]  t[1:10:2]
    元组
    t.index 
    t.count(x)
    字典
    dict
    可变的无序的容器 
    键（key） 值 value  
    {} {1:34}
    dict() dict(可跌代对象) dict(关键)
    value = d[键]
    for 变量 in 可迭代对象
list
比较运算
== ！=
d.iterm
for x,y in d.items():
day08 
集合 
集合是可变容器
集合内的数据对象都是唯一的（不能重复多次）
集合是无序的存储结构，集合中的数据没有先后顺序关系
集合内的对象必须是不可变对象
集合的创建方式：
set()
创建非空集合的字面值
s = {1,2,3}
集合的构造函数创建
set()

s = set()
s = {1,2,3}
s = set("abc")
s = set("abccba")
s = set({1:})
s = ([True,Flase,None])
集合的运算
交集 &  并集 |  补集 -  对称补集^   子集<   超集 >
&
| s ={1,2,3}  s1{2,3,4}
s | s1 = {1,2,3,4}
s-s1 ={4}
s2-s={1}
对称补集   ^  s ^s1 ={1,4}
> 判断一个集合是另一个集合的超级
<判断一个集合是另一个集合的子集
s > s1 
s1 ={1,2,3}
s2 ={3,2,1}
s1 = s2    True
s1 != s2 False
<=
>=
&=
|=
^=
in      not in
同列表的 in/not in 作用相同
集合相关函数
len(x)   max(x)  min(x)  sum (x)

练习：
经理有：曹操 刘备 孙权
技术员： 曹操 孙权  张飞 关羽
用集合求
1既是经理也是技术员的是谁
是技术员但不是经理的是谁
是经理但不是技术员的是谁
张飞是经理吗
身兼一职的人有谁
经理和技术员共有多少人

s1 = {"曹操","刘备","孙权"}
s2 = {"曹操","孙权","张飞","关羽"}
print("是") 
   s1 & s2
s4 = s2 -s1
s5 = s1-s2
if x in s1:
print(x)
s1 ^ s2
s1 | s2

集合的方法：

集合推导式
语法
{表达式 for 变量名 in 可迭代对象 [if 真值表达式]}
L = [1,2,3]
S = {X **2 for x in l if   }

推导式
列表  字典 集合
可变的  list set 
不可变  tuple  frozenset

固定集合
frozenset 
固定集合是不可变的 无序的  含有唯一元素的集合
固定集合就是不可变的集合
作用：
固定集合可以最为字典的键，可以作为集合的值
固定集合的构造函数
frozenset（） 可以创建一个空的固定集合
frozenset(iterable) 可迭代对象创建一个规定集合
fz = frozenset()

运算符：
&  | - ^ &= |= <= >= != ==
in  not ni 
集合的方法：
相当于集合的方法去掉修改的方法

小结
数据类型
不可变的数据类型
int  float complex bool str tuple frozenset
bytes
可变的数据类型
list dict set bytearray(字节数组)
值
None False True ………………
运算符
+ -  * / // %  is  is not   in   not in   not and or  & \ -^> <=
+ 
表达式 
1 + 2  len 
x if x > y slse y绑
全部的推导式 [x for x in range(10)]
语句
表达式语句
print("")
"a"
赋值语句
a =100
a = b = 10
x ,y = 100,200
del 语句
if 语句
while 语句
for 语句
break 
pass     continue 语句
内建函数
len(x) max(x) min(x) sum(x) any(x) all(x)
构造函数
int()
float()
complex()
bool()
str()
list()
tuple()
set()
dict()
frozenset()
数值型函数
abs()
round(x,y)
pow(x,y,z = None)
字符串相关函数
bin()
oct()
hex()
chr()
ord()
可迭代的函数
range
reverse
输入 输出
其他
id
函数
可以重复执行的语句块 可以重复调用
函数是面向过程编程的最小单位
函数的作用：
用于封装语句块，提高代码的重用性
定义用户级别的函数
def 语句
作用：
创建一个函数，用变量绑定这个函数
语法：
def 函数名（形参列表）：
    语句块（代码块）
说明：
1   函数的名字就是语句块的名称
2函数名的命名规则写变量名相同（必须为标识符） 命名规则
3函数名是一个变量（不要轻易对他赋值）
4形参列表是用户自定义的变量名，用来接收调用者传入的参数
5函数有自己的名字空间可以访问函数外部的变量，但不能用赋值语句
    def say_hello():
函数调用
函数名（[实际调用传递参数]）
注[]代表内部的内容可以省略

说明：
函数调用是 一个表达式
如果函数内部没有return
say_hello()
print()
def say():
def say_hello():
value = 100
print()
内部函数不能在外部调用
局部变量 全局变量
mymax(a,b)

写一个函数myadd,此函数中的参数列表里有两个参数x,y此函数的功能是打印调用参数的和，即x + y此函数的功能是打印调用参数的和，即x+y此函数的功能是打印调用参数的和，即x+y此函数的功能是打印调用参数的和，即x
def myadd(x,y):
    print(x+y)

写一个函数print_even，传入一个参数n代表终止的整数（注：不包含n）,此函数打印
def print_even():
    for x in range(0,n):
        if n % 2==0:
        print(x)

return语句
语法：
return[表达式]
作用：
用于函数中，结束当前函数的执行，返回到调用该函数的地方，同时返回一个对象的引用关系
说明：
return 语句后跟的表达式可以省略
实例
return.py
写一个函数mymax,实现返回两个数的最大值：
如：
def mymax(a,b):

练习
写一个函数get_chinese_char_count,次函数
写一个函数 get _chinese
定义两个函数：
sum3(a,b,c) 用于函数中，结束当前函数的执行，返回到调用该函数的地方，同时返回一个对象的引用关系
用于返回三个数的和
3 编写函数fun,



 